# Project guardrails for Cursor

## Stack

- Vite + React + TypeScript
- ESLint (flat config) + Prettier
- SASS with BEM naming convention
- React Router for navigation
- Prefer functional components + hooks
- Keep components small and typed (no "any" unless justified)

## Code Style

- Follow Prettier; no manual style rules that conflict with Prettier
- Use named exports when practical
- Strict TS: no implicit any; avoid tslint-like disable unless justified in comment
- Enforce accessibility via eslint-plugin-jsx-a11y
- use Type not Interface
- React components use PascalCase
- folder name use camelCase or kebab-case
- constant use UPPER_SNAKE_CASE
- function and variable use camelCase

## Architecture

- UI components put in `src/components/`
- Pages put in `src/pages/`
- Internal shared utilities put in `src/utils/`
- External libraries and contexts put in `src/lib/`
- Type definitions put in `src/types/`
- Styles put in `src/styles/`
- Avoid deep prop drilling; use context only when needed

## Performance

- React.memo for pure visual components
- useCallback/useMemo for stable refs in heavy lists
- Code-split routes or big chunks

## Testing (optional later)

- Plan for vitest + @testing-library/react

## DevEx

- Every new file must pass `pnpm run lint` and `pnpm tsc`
- Dark mode support with system preference detection
- Responsive design for all screen sizes

## Git Commit Guidelines

### Commit Message Format

Use the following format for commit messages (based on Conventional Commits):

```
<type>: <description>
```

**Important Notes**:

- No scope usage, keep it simple
- Use single line description, avoid multi-line content
- Start description with imperative verb

### Commit Types

- **feat**: A new feature
- **fix**: A bug fix
- **docs**: Documentation only changes
- **style**: Changes that do not affect the meaning of the code (white-space, formatting, etc.)
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **perf**: A code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **chore**: Changes to the build process or auxiliary tools and libraries
- **ci**: Changes to our CI configuration files and scripts

### Description Writing Principles

- **Must** start with imperative verb (e.g., add, fix, update, remove, implement, refactor)
- Do not end with a period
- Keep it concise and clear, describe what was done in one sentence
- Write in English
- Avoid overly technical details, focus on what was accomplished

### Example Commit Messages

```
feat: add custom captive portal API endpoints
fix: resolve react 419 error by using dynamic import
docs: update API documentation for new endpoints
style: format code according to ESLint rules
refactor: improve API structure for better maintainability
perf: optimize image loading performance in portal
test: add unit tests for authentication service
chore: update dependencies to latest versions
ci: add automated deployment pipeline
```
